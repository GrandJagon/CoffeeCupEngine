#pragma once

#include <memory>
#include <iostream>

#include "input/inputHandler.h"
#include "events/eventManager.h"

class Window;
class Camera;
class Renderer;
class TextureManager; // Loads and unloads textures
class InputManager;   // Takes inputs generated by InputHandler and give context chains generate high level events
class InputHandler;   // Converts platform specific inputs to game inputs
class EventManager;   // Dispatches events to subscribers
class SceneManager;

// Defined in inputHandler.h
struct Key;

enum GameState
{
    running,
    pause,
    menu
};

class Game
{
protected:
    // Core data members
    std::string _title;
    GameState _state;
    float _deltaTime;

    std::unique_ptr<Window> _window;
    std::unique_ptr<Camera> _camera;

    // Subsystems
    std::shared_ptr<Renderer> _renderer;
    std::shared_ptr<TextureManager> _textureManager;
    std::shared_ptr<InputHandler> _inputHandler;
    std::shared_ptr<InputManager> _inputManager;
    std::shared_ptr<EventManager> _eventManager;
    std::unique_ptr<SceneManager> _sceneManager;

public:
    virtual ~Game();

    virtual void init(std::string title, int width, int height);

    virtual void start();

    // Main game loop
    virtual void run();

    virtual void update(float dt);

    virtual void processEvents();

    // Updates to be made once we sure the first ones are done
    virtual void lateUpdate();
    virtual void render();
    virtual void pause();
    virtual void shutDown();

    std::unique_ptr<Camera> &getCamera() { return _camera; };
};